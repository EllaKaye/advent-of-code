{
  "hash": "93163b87b25f9b54a545b3b4faba8a9a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2023: Day 6\"\ndate: 2023-12-6\nauthor: \n  - name: Ella Kaye\ncategories: [base R, ⭐⭐]\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2023/day/6)\n\n[My data](input){target=\"_blank\"}\n\n## Part 1\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aochelpers)\n# other options: aoc_input_data_frame(), aoc_input_matrix()\ninput <- aoc_input_vector(6, 2023)\nhead(input)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Time:        55     99     97     93\"\n[2] \"Distance:   401   1485   2274   1405\"\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nCalculate all possible distances we can travel in the race, \ndepending on how long we hold the button,\nthen find the product of the distances that beat the current record.\n:::\n\nAfter the challenges of the past couple of days, \ntoday's puzzle seems remarkably straight-forward.\n\nWrangle the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_numbers <- lapply(input, aochelpers::extract_numbers)\ntimes <- input_numbers[[1]]\nrecords <- input_numbers[[2]]\n```\n:::\n\n\nFunction for number of ways to win one race, \nwhere the arguments are single elements of `times` and `records`:^[I obviously don't need both `hold_times` and `move_speeds` but this made it slightly easier for me to reason about the situation.]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_ways_to_win <- function(time, record) {\n\thold_times <- move_speeds <- seq_len(time)\n\tmove_times <- time - hold_times\n\tdistances <- move_times * move_speeds\n\t\n\tsum(distances > record)\n}\n```\n:::\n\n\nNow apply this to all races, and get their product. \nWe need `mapply()` rather than `sapply()` since we're iterating over more than one argument to `num_ways_to_win()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapply(num_ways_to_win, times, records) |> \n  prod() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2374848\n```\n\n\n:::\n:::\n\n\nAfter I completed this, I saw an interesting discussion on the Advent of Code channel in the R4DS Slack about using a quadratic equation to solve this.\nThat's an elegant approach. My approach can be considered 'brute force' in comparison, since it calculates all possible distances. \nBut since it only takes 0.001 seconds to run in R, and takes advantage of R's vectorisation, I'm satisfied with my approach.\n\n## Part 2\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nAs above, but for one much longer race.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntime <- paste(times, collapse=\"\") |> as.numeric()\nrecord <- paste(records, collapse=\"\") |> as.numeric()\nnum_ways_to_win(time, record)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 39132886\n```\n\n\n:::\n:::\n\n\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-12-06\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.4.515 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n aochelpers  * 0.1.0.9000 2023-12-06 [1] local\n sessioninfo * 1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n\n [1] /Users/ellakaye/Library/R/arm64/4.3/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}