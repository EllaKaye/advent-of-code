{
  "hash": "c3eba0af4a0a4090bdcffc13959b611d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2023: Day 14\"\ndate: 2023-12-14\nauthor: \n  - name: Ella Kaye\ncategories: [base R, matrices, ⭐]\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2023/day/14)\n\n[My data](input){target=\"_blank\"}\n\n## Part 1\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aochelpers)\ninput <- aoc_input_matrix(14, 2023)\nhead(input, c(6, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,] \".\"  \".\"  \".\"  \".\"  \"#\"  \".\" \n[2,] \".\"  \"O\"  \".\"  \"#\"  \".\"  \"#\" \n[3,] \"O\"  \".\"  \"O\"  \"#\"  \".\"  \".\" \n[4,] \".\"  \"O\"  \".\"  \"O\"  \".\"  \".\" \n[5,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\" \n[6,] \".\"  \".\"  \".\"  \".\"  \".\"  \".\" \n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\n'Tilt' a matrix to roll the `\"O\"`s until they reach a `\"#\"`.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reverse order of rows\ninput_rev <- input[nrow(input):1, ]\n\n# function to tilt one column and find the load\ntilt <- function(col) {\n\tsorted <- col |> \n\t\tfactor(levels = c(\"#\", \".\", \"O\")) |> \n\t\tsplit(cumsum(col == \"#\")) |> \n\t\tlapply(sort) |> \n\t\tdo.call(c, args = _) \n\t\n\twhich(sorted == \"O\") |> \n\t\tsum()\n}\n\n# apply to all columns and find total load\napply(input_rev, 2, tilt) |> \n\tsum()                  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 105461\n```\n\n\n:::\n:::\n\n\nThe puzzle talks about tilting north, \nbut since the load is equal to the number of rows from the bottom,\nin terms of associating the load with the row index, \nit's easier to reverse the order of the rows and think about tilting the matrix south.\n\nNext, a function that will order one column.\nThe strategy is to split the column at the `\"#\"`s,\nsort each element of the resulting list to move the `\"O\"`s (having converted the vector into a factor so we can sort in the desired order),  \nthen rejoin the vector. \nWe can then find the indices of the round rocks, \nand their sum is the load for that column.\n\nFinally, apply that to each column of the matrix,\nand find the total sum.\n\n## Part 2\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nSomething to do with cycles.\n:::\n\nThis doesn't seem well-suited to a brute force approach.\nAt the time of writing, I'm not familiar with any algorithm that would be suitable here. \nOn the R4DS Slack, Jonathan Carroll and Tan Ho have hinted about using the cycle-detection algorithm and have posted their solutions.\nAt some point, I may come back to this, \nread about the algorithm and either attempt to implement it myself, or work through their code to get a deeper understanding.\n\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-12-15\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.4.526 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n aochelpers  * 0.1.0.9000 2023-12-06 [1] local\n sessioninfo * 1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n\n [1] /Users/ellakaye/Library/R/arm64/4.3/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}