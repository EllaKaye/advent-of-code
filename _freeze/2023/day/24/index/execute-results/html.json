{
  "hash": "21583a5418b1770d6437c86e59379c79",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2023: Day 24\"\ndate: 2023-12-24\nauthor: \n  - name: Ella Kaye\ncategories: [base R, line equations, aochelpers, ⭐]\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2023/day/24)\n\n[My data](input){target=\"_blank\"}\n\n## Part 1\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(aochelpers)\ninput <- aoc_input_vector(24, 2023)\nhead(input)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"212542581053874, 357959731032403, 176793474286781 @ -88, -256, -240\"\n[2] \"154677220587564, 207254130208265, 139183938188421 @ 184, 74, 235\"   \n[3] \"216869547613134, 38208083662943, 397740686492049 @ 109, 262, -66\"   \n[4] \"221241619250961, 303902532813154, 249144641113790 @ 48, 24, -112\"   \n[5] \"432610900189894, 347346225570463, 389169322099761 @ -166, -99, -81\" \n[6] \"247078054674939, 279574769079583, 357168683293046 @ 68, -13, -42\"   \n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nDetermine which pairs of lines intersect within a given area, in the future.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# path is one line of the original input\nget_line <- function(path) {\n\tnums <- aochelpers::extract_numbers(path)\n\t\n\tpx <- nums[1]\n\tpy <- nums[2]\n\tvx <- nums[4]\n\tvy <- nums[5]\n\tm <- vy/vx\n\tb <- py - m * px\n\t\n\treturn(list(px = px, py = py, m = m, b = b, vx = vx, vy = vy))\n}\n\nboth_in_range <- function(x, \n                          y, \n                          min = 200000000000000, \n                          max = 400000000000000) {\n\tifelse(x >= min && x <= max && y >= min && y <= max,\n\t\t\t\t TRUE,\n\t\t\t\t FALSE)\n} \n\npaths_intersect <- function(path1, path2) {\n\tA <- get_line(path1)\n\tB <- get_line(path2)\n\t\n\t# parallel lines won't intersect\n\tif (A$m == B$m) {\n\t\t# print(\"lines are parallel\")\n\t\treturn(FALSE)\n\t}\n\t\n\t# point of intersection\n\tx <- (B$b - A$b)/(A$m - B$m)\n\ty <- A$m * x + A$b\n\t\n\t# check if in past\n\tif (x > A$px && A$vx < 0 || x < A$px && A$vx > 0) {\n\t\t#print(\"intersect in past for A\")\n\t\treturn(FALSE)\n\t}\n\t\n\tif (x > B$px && B$vx < 0 || x < B$px && B$vx > 0) {\n\t\t#print(\"intersect in past for B\")\n\t\treturn(FALSE)\n\t}\n\t\n\tboth_in_range(x, y)\n}\n\n# check all pairs\n# need stringsAsFactors = FALSE to enable comparison to get unique pairs\nall_pairs <- expand.grid(input, input, stringsAsFactors = FALSE)\nunique_pairs <- all_pairs[all_pairs$Var1 < all_pairs$Var2, ]\n\nmapply(paths_intersect, unique_pairs$Var1, unique_pairs$Var2) |> \n\tsum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24192\n```\n\n\n:::\n:::\n\n\nNow that there have been a few puzzles in which we need to extract all the numbers from a string, I've added a function, `extract_numbers()` to my [**aochelpers**](https://ellakaye.github.io/aochelpers) package to do that,\nwhich comes in handy today.\n\nA bit of maths gets us the equation of a line and, for any pair of lines, their point of intersection. Then, it's just a case of checking whether they intersected in the past (the part of the puzzle that caught me out for a bit) and, if not, whether they intersect in the test area.\n\nFinally we use `expand.grid()` to get all pairs of lines, then filter down to unique pairs.\nWe can then apply our `paths_intersect()` function to all unique pairs, using `mapply()` since `paths_intersect()` takes more than one argument. Since `TRUE` has a numeric value of `1` and `FALSE` is `0`, the sum of the output of `paths_intersect()` on all pairs gives the number of pairs of lines which intersect, as required.\n\n## Part 2\n\n::: {.callout-note collapse=\"false\" icon=\"false\"}\n## The crux of the puzzle\nFind the starting position and velocity of a rock which,\nwhen thrown, will hit all the hailstones.\n:::\n\nNot attempted (yet).\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-12-24\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.4.526 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n aochelpers  * 0.1.0.9000 2023-12-24 [1] local\n sessioninfo * 1.2.2      2021-12-06 [1] CRAN (R 4.3.0)\n\n [1] /Users/ellakaye/Library/R/arm64/4.3/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}