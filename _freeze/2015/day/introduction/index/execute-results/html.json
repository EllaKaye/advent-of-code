{
  "hash": "6aeb7a1cb5d07265d943297b82b97c0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2015: Introduction\"\nauthor: Ella Kaye\ndate: 2015-11-30\ncode-tools: true\n---\n\n\n\n\n\nIt's February 2024.^[For the posts for each day's challenge, I'm sticking with the publish date as the day the challenge was originally published, rather than the date of writing up my solution, so this introduction post is arbitrarily dated before December 2015 to keep the posts in order.] In my [conclusion post for 2023](../../../2023/day/conclusion/index.qmd), I stated my intention to learn C this year by working through weeks 1-5 of the [CS50](https://cs50.harvard.edu/x/2024) material and to put into practice what I learnt by working through the 2015 run of Advent of Code in both R and C. Here goes!\n\nBefore I get to the challenges, in this introductory post, I'll explain my setup. AT the time of writing this, I've already solved days 1-5, so I've had a chance to put this to the test and refine as needed.\n\n## C script template\nI'm using my [aochelpers](https://ellakaye.github.io/aochelpers) R package to create new posts. The `aoc_new_day()` function downloads the puzzle input and copies the contents of template folder. Into that folder, I've now added `part1.c` which contains a template that's likely to be a good starting point for each challenge:\n\n\n::: {.cell}\n\n```{.c .cell-code}\n// template that's likely to be close to what's required for an AoC puzzle\n#include <stdio.h>\n#include <string.h>\n#define LINE_LENGTH 50 //including '\\0'\n\n// default input file\n#define INPUT_FILE \"input\"\n\nint process_line(const char line[]);\n\nint main(int argc, char *argv[]) {\n\t\n\t// check usage\n\tif (argc != 1 && argc != 2)\n\t{\n\t\tprintf(\"Usage: ./part1 [INPUT_FILE]\\n\");\n\t\treturn 1;\t\t\n\t}\n\t\n\t// determine input file to use\n\tchar *input_file = (argc == 2) ? argv[1] : INPUT_FILE;\n\t\n\t// open file in read mode\n\tFILE *fptr = fopen(input_file, \"r\");\n\tif (fptr == NULL)\n\t{\n\t\tprintf(\"Could not open file %s.\\n\", input_file);\n\t\treturn 1;\n\t}\n\t\n\t// Set up accumulator\n\t// OR WHATEVER ELSE IS REQUIRED FOR THE PUZZLE\n\tint total = 0;\n\t\n\t// Read the content and store it inside input_line buffer\n\t// ALTERNATIVES: \n\t\t// read in chars individually with fgetc\n\t\t// read in formatted string with fscanf\n\tchar input_line[LINE_LENGTH];\n\twhile (fgets(input_line, LINE_LENGTH, fptr)) \n\t{\n\t\tint value = process_line(input_line);\n\t\t\n\t\t// WHATEVER WE NEED HERE\n\t\ttotal += value;\n\t}\n\t\n\t// close the file\n\tfclose(fptr);\n\t\n\t// print out the answer\n\tprintf(\"%d\\n\", total);\n}\n\nint process_line(const char line[]) {\n\t\n\tint value = 0;\n\t\n\t// PROCESS THE LINE!\n\tprintf(\"%s\\n\", line);\n\t\n\treturn value;\n}\n```\n:::\n\n\nThis script deals with a lot of boilerplate.\nIt's set up so that the program can be called with a command line argument that specifies the name of the input file to use (useful for testing programs on smaller examples). If not specified, it defaults to a file named \"input\" (which should be in the directory, if the post was created with `aoc_new_day()`). \nIt assumes that we'll then read in each line of the input file in turn and process it in some way, with the `process_line` function. \nWe assume that each line contributes to some `total` value, which we print out at the end. \nI expect for each challenge that I'll need to edit the `process_line` function to do as required, and that I may need to edit how the accumulator works. Additionally, I may need to alter how I read in the file, e.g. to read in a character at a time, rather than a line.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}