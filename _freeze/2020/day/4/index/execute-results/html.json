{
  "hash": "9b6eefca195100342dd0746a00c2e961",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2020: Day 4\"\ndate: 2020-12-4\nauthor: \n  - name: Ella Kaye\ncategories:\n  - tidyverse\nopen-graph: true\ndraft: false\n---\n\n\n## Setup\n\n[The original challenge](https://adventofcode.com/2020/day/4)\n\n[My data](input){target=\"_blank\"}\n\n## Part 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\n```\n:::\n\n\nUsing `readr::read_tsv()` off the bat removes the blank lines, making it impossible to identify the different passports, but reading in the data via `readLines()` then converting `as_tibble()` preserves them, and then allows us to use `tidyverse` functions for the remaining tidying. `cumsum()` on a logical vectors takes advantage of `FALSE` having a numeric value of zero and `TRUE` having a numeric value of one.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npassports <- \n  readLines(here::here(\"2020\", \"day\", \"4\", \"input\")) %>%\n  as_tibble() %>%\n  separate_rows(value, sep = \" \") %>%\n  mutate(new_passport = value == \"\") %>%\n  mutate(ID = cumsum(new_passport) + 1) %>%\n  filter(!new_passport) %>%\n  select(-new_passport) %>%\n  separate(value, c(\"key\", \"value\"), sep = \":\") %>%\n  relocate(ID)\n```\n:::\n\n\nOur data is now in three columns, with ID, key and value, so now we need to find the number of passports with all seven fields once `cid` is excluded:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npassports %>%\n  filter(key != \"cid\") %>%\n  count(ID) %>%\n  filter(n == 7) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 210\n```\n\n\n:::\n:::\n\n\n#### Part 2: Valid passports\n\nNow we need to add data validation checks:\n\n- byr (Birth Year) - four digits; at least 1920 and at most 2002.\n- iyr (Issue Year) - four digits; at least 2010 and at most 2020.\n- eyr (Expiration Year) - four digits; at least 2020 and at most 2030.\n- hgt (Height) - a number followed by either cm or in:\n    - If cm, the number must be at least 150 and at most 193.\n    - If in, the number must be at least 59 and at most 76.\n- hcl (Hair Color) - a # followed by exactly six characters 0-9 or a-f.\n- ecl (Eye Color) - exactly one of: amb blu brn gry grn hzl oth.\n- pid (Passport ID) - a nine-digit number, including leading zeroes.\n- cid (Country ID) - ignored, missing or not.\n\nIgnoring the `cid` field, we narrow down on passports that at least have the right number of fields, and extract the number from the `hgt` column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_passports <- passports %>%\n  filter(key != \"cid\") %>%\n  add_count(ID) %>%\n  filter(n == 7) %>%\n  select(-n) %>%\n  mutate(hgt_value = case_when(\n    key == \"hgt\" ~ readr::parse_number(value),\n    TRUE ~ NA_real_)) %>%\n  ungroup()\n```\n:::\n\n\nThen we create a `check` column, which is `TRUE` when the value for each key meets the required conditions. Those with 7 `TRUE`s are valid. Note that with `case_when()` we've left the check column as `NA` when the condition is `FALSE`, requiring `na.rm = TRUE` in the call to `sum()`. We can get round that by adding a final line to the `case_when()` condition stating `TRUE ~ FALSE`. `TRUE` here is a catch-all for all remaining rows not covered by the conditions above, and then we set them to `FALSE`, but I find the line `TRUE ~ FALSE` unintuitive. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomplete_passports %>%\n  mutate(check = case_when(\n    (key == \"byr\" & value >= 1920) & (key == \"byr\" & value <= 2002) ~ TRUE,\n    (key == \"iyr\" & value >= 2010) & (key == \"iyr\" & value <= 2020) ~ TRUE,\n    (key == \"eyr\" & value >= 2020) & (key == \"eyr\" & value <= 2030) ~ TRUE,\n    key == \"hgt\" & str_detect(value, \"cm\") & hgt_value >= 150 & hgt_value <= 193 ~ TRUE,\n    key == \"hgt\" & str_detect(value, \"in\") & hgt_value >= 59 & hgt_value <= 76 ~ TRUE,  \n    key == \"hcl\" & str_detect(value, \"^#[a-f0-9]{6}$\") ~ TRUE,\n    key == \"ecl\" & value %in% c(\"amb\", \"blu\", \"brn\", \"gry\", \"grn\", \"hzl\", \"oth\") ~ TRUE,\n    key == \"pid\" & str_detect(value, \"^[0-9]{9}$\") ~ TRUE\n  )) %>%\n  group_by(ID) %>%\n  summarise(check_all = sum(check, na.rm = TRUE)) %>%\n  filter(check_all == 7) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 131\n```\n\n\n:::\n:::\n\n\n\n##### Session info {.appendix}\n\n<details><summary>Toggle</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Sonoma 14.0\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/London\n date     2023-11-06\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n quarto   1.4.466 @ /usr/local/bin/quarto\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.2   2023-04-20 [1] CRAN (R 4.3.0)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.3.0)\n tidyr       * 1.3.0   2023-01-24 [1] CRAN (R 4.3.0)\n\n [1] /Users/ellakaye/Library/R/arm64/4.3/library\n [2] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n</details>\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}