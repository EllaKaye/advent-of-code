---
title: Day 9
date: 2020-12-9
author: 
  - name: Ella Kaye
categories:
  - base R
  - loops
  - purrr
open-graph: true
draft: false
---

## Setup

[The original challenge](https://adventofcode.com/2020/day/9)

[My data](../../input/2020/day9.txt)

## Part 1

We have to find the first number in the list which is *not* the sum of a pair of different numbers in the preceding 25 numbers.

```{r}
input <- as.double(readLines(here::here("input", "2020", "day9.txt")))
```

There's a nice trick for finding the pair of numbers in a vector that sum to a target that was doing the rounds on twitter in response to the [Day 1](../day1/index.qmd) challenge: `intersect(input, 2020 - input)`. For this challenge, we expand on that idea, writing it as a `check_sum` function. Where there's more than one pair, it won't say which pair together, and if the number that's half the target appears in the addends, it will only appear once in the output. However, for this challenge, we only need to know when there are *no* pairs that sum to the target, which will be the case when the length of the output of `check_sum` is 0.

```{r}
check_sum <- function(target, addends) {
  intersect(addends, target-addends)
}
```

Then, it's simply a case of iterating over windows of length 25, checking whether the following number is the sum of a distinct pair in that window, and returning the first one that isn't.

```{r}
find_invalid_num <- function(vec, win = 25) {
  
  for (i in (win+1):length(vec)) {
    check <- check_sum(vec[i], vec[(i-win):(i-1)])
    
    if (length(check) == 0) return(vec[i])
  }
  
}

find_invalid_num(input)
```

## Part 2

Find a contiguous set in the list that sums to the invalid number from Part 1, and add together the largest and smallest number in that range.

First, we note that after a certain point, all numbers in the input are larger than the target, so we don't need to consider those. We reduce our input vector accordingly.

```{r}
target <- find_invalid_num(input)

input_reduced <- input[1:(max(which(input <= target)))]
```

To find the contiguous set in the list that sums to the target, we make use of `accumulate()` from the `purrr` package. Let the input list be $x = (x_1, x_2,..., x_n)$. Then `accumulate(x, sum)` returns $a = (x_1, x_1 + x_2,..., \sum_{j=1}^n x_j)$. We check whether any element of this vector is equal to the target. If so we index into the input vector appropriately, sum the min and max in the range and we're done. If not, we consider the sums of all windows starting with the second element of the input list, and so on.

```{r}
contiguous_sum <- function(input, target) {
  
  len <- length(input)
  
  for (i in 1:len) {
    a <- purrr::accumulate(input[i:len], sum)
    b <- a == target
    
    if (sum(b) == 1) {
      output_length <- which(b)
      
      contiguous_set <- input[i:(i + output_length - 1)]
      
      return(sum(range(contiguous_set)))
    }
  }
}

contiguous_sum(input_reduced, target)
```

I appreciate that there's some redundant calculation in this method. The vectors of accumulated sums can contain numbers larger than the target (if writing our own loop, we could break as soon as the accumulated sum got too big). Also, in retrospect, we could have only run `accumulate` once, then in the second iteration of the loop, subtracted `input[1]` from the result, in the third iteration subtracted `input[2]` from that result, etc. However, the function as written is concise and easy to understand, and gets our answer in around a second, so that will do!



##### Session info {.appendix}

<details><summary>Toggle</summary>

```{r}
#| echo: false
library(sessioninfo)
# save the session info as an object
pkg_session <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_session$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_session
```

</details>





