---
title: "2015: C setup"
author: Ella Kaye
date: 2015-11-30
code-tools: true
---

```{r}
#| include: false
# Empty block to ensure the page renders with knitr
```

Before I get to the challenges, in this introductory post, I'll explain my C setup. At the time of writing this, I've solved days 1-5, so I've had a chance to put this to the test and refine as needed.

## C script template
I'm using my [aochelpers](https://ellakaye.github.io/aochelpers) R package to create new posts. The `aoc_new_day()` function downloads the puzzle input and copies the contents of a template folder. Into that folder, I've now added `part1.c` which contains a template that's likely to be a good starting point for each challenge. In each day's post, I want to focus on the code that's relevant to the challenge itself, so I'll highlight the boilerplate here.

```{c eval = FALSE}
// template that's likely to be close to what's required for an AoC puzzle
#include <stdio.h>
#include <string.h>
#define LINE_LENGTH 50 //including '\0'

// default input file
#define INPUT_FILE "input"

int process_line(const char line[]);

int main(int argc, char *argv[]) {
	
	// check usage
	if (argc != 1 && argc != 2)
	{
		printf("Usage: ./part1 [INPUT_FILE]\n");
		return 1;		
	}
	
	// determine input file to use
	char *input_file = (argc == 2) ? argv[1] : INPUT_FILE;
	
	// open file in read mode
	FILE *fptr = fopen(input_file, "r");
	if (fptr == NULL)
	{
		printf("Could not open file %s.\n", input_file);
		return 1;
	}
	
	// Set up accumulator
	// OR WHATEVER ELSE IS REQUIRED FOR THE PUZZLE
	int total = 0;
	
	// Read the content and store it inside input_line buffer
	// ALTERNATIVES: 
		// read in chars individually with fgetc
		// read in formatted string with fscanf
	char input_line[LINE_LENGTH];
	while (fgets(input_line, LINE_LENGTH, fptr)) 
	{
		int value = process_line(input_line);
		
		// WHATEVER WE NEED HERE
		total += value;
	}
	
	// close the file
	fclose(fptr);
	
	// print out the answer
	printf("%d\n", total);
}

int process_line(const char line[]) {
	
	int value = 0;
	
	// PROCESS THE LINE!
	printf("%s\n", line);
	
	return value;
}
```

This script deals with a lot of boilerplate.
It's set up so that the program can be called with a command line argument that specifies the name of the input file to use (useful for testing programs on smaller examples). If not specified, it defaults to a file named "input" (which should be in the directory, if the post was created with `aoc_new_day()`). 
It assumes that we'll then read in each line of the input file in turn and process it in some way, with the `process_line` function. 
We assume that each line contributes to the `total` value, which we print out at the end. 
I expect for each challenge that I'll need to edit the `process_line` function to do as required, and that I may need to edit how the accumulator works. Additionally, I may need to alter how I read in the file, e.g. to read in a character at a time, rather than a line.

## Makefile 
I first learnt C through weeks 1-5 of [CS50](https://cs50.harvard.edu/x/2024). One of the many appeals of the course is that they provide a codespace in which everything "just works". In particular, any program that you write in the codespace can be compiled with `make program`, for any given script.c. Although the course does cover the process of compiling, assembling and linking C code, and I'm familiar with `clang -o program program.c` (**CHECK THIS!**), there is something pleasing about the simplicity of calling `make`, especially if we want to use additional flags, e.g. `-Wall -Wextra`.

## Compiling

- alias
- libraries

## homebrew

## leaks

## LLMs

- No Copilot
- How I'm using ChatGPT

## Resources

- CS50
	- https://manual.cs50.io
- Books 
	- C Programming (K. N. King)
	- Modern C
	- 21st Century C